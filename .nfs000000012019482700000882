#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct list* list;
typedef struct node* node;
// typedef int /*nodeType*/int;

struct list {
  struct node *header;
  struct node *footer;
};

struct node {
  /*nodeType*/
  int key;
  int value;
  struct node *prev;
  struct node *next;
};

node node_malloc(void) {
  printf("sizeof(struct node): %lu\n", sizeof(struct node));
  node n = malloc(sizeof(struct node));
  printf("sizeof(struct node): %lu\n", sizeof(struct node));
  if (n == NULL) {
    perror("node_malloc");
    exit(EXIT_FAILURE);
  }
  return n;
}

void free_node(struct node *n) {
  free(n);
}

void init_list(struct list *l) {
  printf("here\n");
  l->header = node_malloc();
  printf("here\n");
  l->footer = node_malloc();
  l->header->prev = NULL;
  l->footer->next = NULL;
  l->header->next = l->footer;
  l->footer->prev = l->header;
}

node get_header(struct list *l) {
  return l->header; //next();
}

node get_footer(struct list *l) {
  return l->footer;
}

node next(struct node *n) {
  return n->next;
}

node prev(struct node *n) {
  return next(n);
}

/*nodeType*/int get_node_keyue(struct node *n) {
  return n->key;
}

void set_node_keyue(struct node *n, /*nodeType*/int x) {
  n->key = x;
}

bool is_not_termination(struct node *n) {
  return prev(n) != NULL && next(n) != NULL;
}

// void delete(list l, ) {

void free_list(struct list *l) {
  node first = get_header(l);
  node nxt = first->next; //next(first); //curr->next;
  while (nxt != NULL) {
    free_node(first);
    first = nxt;
  }
  free_node(nxt);
}

void add(struct list *l, /*nodeType*/int x) {
  node n = get_footer(l);
  printf("here\n");
  n->prev->next = node_malloc();
  printf("1\n");
  // next(prev(n)) = malloc(sizeof(struct node));
  set_node_keyue(n->prev->next, x);
  printf("2\n");
  // prev(n)->get_node_keyue(next) = x;
  n->prev = n->prev->next;
  // n->prev = next(prev(n)); //n->prev->next;
  printf("3\n");
  // prev(n) = prev(n)next();
};

// void remove;
node find(struct list *l, /*nodeType*/int x) {
  node curr = get_header(l);
  // printf("header: %d\n", get_node_keyue(curr));
  while (curr != NULL) {
    curr = curr->next; // next(curr);
    printf("key: %d\n", get_node_keyue(curr));
    /*nodeType*/int y = get_node_keyue(curr);
    printf("y: %d\n", y);
    if (y == x) {
    	// printf("FOUND\n");
      return curr;
    }
  }
  return NULL;
}

int main(void) {
  printf("defdefdwse\n"); //, x);
  struct list example;
  printf("defdefdwse\n"); //, x);
  init_list(&example);
  // int x = get_node_keyue(get_header(&example));
  //init_list(example);
  printf("add\n");
  add(&example, 5);
  add(&example, 10);
  add(&example, 2);
  add(&example, 15);
  find(&example, 10);
  // find(&example, 15);
  // find(&example, 2);
  // free_list(&example);
}
